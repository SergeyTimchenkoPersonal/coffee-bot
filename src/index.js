require('dotenv').config()
const TeLegramBotAPI = require('node-telegram-bot-api')
const mongoose = require('mongoose')
var CronJob = require('cron').CronJob
const User = require('./models/User')
const drinkCategories = require('./config/drinkCategories.json')
const drinkCategoriesKeyboard = require('./config/drinkCategoriesKeyboard')
const drinksKeyboard = require('./config/drinksKeyboard')
const coffeeShops = require('./config/coffeeShops.json')
const drinks = require('./config/drinks')
const { getDayOfWeek } = require('./helper')

const bot = new TeLegramBotAPI(process.env.TOKEN, { polling: true })

const coffeeDayJob = new CronJob('* * * * * *', async () => {
	const users = await User.find({})

	await Promise.all(
		users.map((i) => {
			sendCoffeeDayMessage(i.chat_id)
		})
	)
})
coffeeDayJob.start()

const generateKeyboard = (arr, hasBackButton = false) => {
	if (hasBackButton) arr.push(['–ù–∞–∑–∞–¥'])
	return {
		reply_markup: JSON.stringify({
			keyboard: arr,
		}),
		resize_keyboard: true,
	}
}

const generateCoffeeDay = (day) => {
	let result = ''
	for (const key in drinks) {
		result += `${drinkCategories[key]}:  ${drinks[key][day]}\n`
	}
	return result
}

const sendCoffeeDayMessage = async (chatId) => {
	try {
		const day = new Date().getDay()
		await bot.sendMessage(
			chatId,
			`–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ${getDayOfWeek(
				day
			)}\n\n–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∏: \n\n${generateCoffeeDay(day)}`,
			generateKeyboard(drinkCategoriesKeyboard)
		)
	} catch (error) {
		console.log(`Server Error: `, error)
	}
}

const sendContacts = async (chatId) => {
	await bot.sendMessage(
		chatId,
		`–ñ–¥—ë–º —Ç–µ–±—è —É –Ω–∞—Å –ö–†–£–ì–õ–û–°–£–¢–û–ß–ù–û üåñ\n\n
						Vk: https://vk.com/old_school_coffee \n
						Instagram: https://www.instagram.com/old_school_coffee/\n\n
						üè¢–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ :\n\n
						- —É–ª. –ü–µ—Ç—Ä–æ–≤—Å–∫–∞—è, 89–∞ üî¥\n
						- —É–ª. –ü–µ—Ç—Ä–æ–≤—Å–∫–∞—è, 9/11 üî¥`
	)
	await bot.sendLocation(
		chatId,
		coffeeShops.FIRST.latitude,
		coffeeShops.FIRST.longitude
	)
	return bot.sendLocation(
		chatId,
		coffeeShops.SECOND.latitude,
		coffeeShops.SECOND.longitude
	)
}

const sendDrinksOfCategory = async (chatId, text) => {
	const category = Object.keys(drinkCategories).reduce((acc, cur) => {
		if (drinkCategories[cur] === text) acc = cur
		return acc
	}, '')
	return bot.sendMessage(
		chatId,
		`–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${drinkCategories[category]}"`,
		generateKeyboard(drinksKeyboard[category], true)
	)
}

const sendMenu = async (chatId) => {
	return bot.sendMessage(
		chatId,
		'–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏–∑ –Ω–∞—à–µ–≥–æ –º–µ–Ω—é',
		generateKeyboard([['–ù–∞–ø–∏—Ç–∫–∏'], ['–î–æ–±–∞–≤–∫–∏'], ['–í–∫—É—Å–Ω—è—à–∫–∏'], ['–ù–∞–∑–∞–¥']])
	)
}

const start = async () => {
	try {
		await mongoose.connect(process.env.MONGO_URI, {
			useNewUrlParser: true,
			useUnifiedTopology: true,
			useCreateIndex: true,
			useFindAndModify: false,
		})
		console.log('Database is conected!')
	} catch (e) {
		console.log('Server error', e.message)
		process.exit(1)
	}

	bot.on(
		'message',
		async ({ from, chat: { id: chat_id }, text, message_id }) => {
			try {
				const user = await User.findOne({ chat_id })
				if (text === '/start') {
					if (!user) {
						await User.create({
							...from,
							chat_id,
						})
					}
					const { message_id } = await bot.sendMessage(
						chat_id,
						`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${from.first_name} \n\n –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é, —É–∑–Ω–∞—Ç—å –ø—Ä–æ –∞–∫—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏!\n\n
						–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n
						/contacts - –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n
						/coffeeDay - –ù–∞–ø–∏—Ç–∫–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n
						/menu - –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω—é`
					)
					await User.findOneAndUpdate({ chat_id }, { message_id })
				} else if (text === '/menu') {
					sendMenu(user.chat_id)
				} else if (text === '–ù–∞–ø–∏—Ç–∫–∏') {
					return bot.sendMessage(
						user.chat_id,
						'–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤',
						generateKeyboard(drinkCategoriesKeyboard)
					)
				} else if (Object.values(drinkCategories).includes(text)) {
					sendDrinksOfCategory(user.chat_id, text)
				} else if (text === '/contacts') {
					sendContacts(user.chat_id)
				} else if (text === '/coffee_day') {
					sendCoffeeDayMessage(user.chat_id)
				}
			} catch (error) {
				console.log(error)
				bot.sendMessage(
					chat_id,
					'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è üòâ'
				)
			}
		}
	)
}

start()
